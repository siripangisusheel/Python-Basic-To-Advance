                                                                         Python Notes 
----------------------[DAY-1]-----------------------
{TPC-1}
WHAT IS PYTHON?  
Python is now one of the most popular and widely used programming, Besides web and software development  .It is an interpreted, object-oriented, high-level programming language.

{TPC-2}
Comments In Python
Types:  
1. Single line comment --- represent with special symbol - # (#)Shortcut Key for comment in programming language is (ctrl+forward Arrow)
2. Multi line comments --- represent with invited quotes with three times-  
‘‘‘you have to write comments with in this quotes ’’’

{TPC-3}
Variables in python and its use cases
Syntax: Var_name = Value  
Ex: Name = “Suresh” - Str 
Age = 25 - int 
Height = 5.7 - Float
{Examples Are Below}!
Many Values to Multiple Variables 
x, y, z = "Orange", "Banana", "Cherry" 
print(x) 
print(y) 
print(z) 
One Value to Multiple Variables 
x = y = z = "Orange" 
print(x) 
print(y) 
print(z) 

{TPC-4}
Print is a function to print the variable as below
Output Variables 
The Python print() function is often used to output variables. 
x = "Python is awesome" 
print(x)
Output:Python is awesome
In the print() function, you output multiple variables, separated by a comma: 
Example 
x = "Python" 
y = "is" 
z = "awesome" 
print(x, y, z)
Output:Python is awesome

---------------------------[Day-2]------------------------------

{TPC-1}
Built-in Data Types
Text Type :str 
Numeric Types :int, float, complex  
Sequence Types :list, tuple 
Mapping Type :dict 
Set Types :set
Boolean Type :bool  
{Examples Are Below}!
Type is a function to print the Type of X as below
Int: Int, or integer, is a whole number, positive or negative, without decimals, of unlimited length. 
Print the data type of the variable x: 
x = 5 
print(type(x))
Output:<class 'int'> 
Float:Float, or "floating point number" is a number, positive or negative, containing one or more decimals.
Example
x = 1.10, z = -35.59 
print(type(x)) 
print(type(z))
Complex: Complex numbers are written with a "j" as the imaginary part: 
Example 
x = 3+5j, z = -5j 
print(type(x)) 
print(type(z)) 

{TPC-2}
Type Conversion 
You can convert from one type to another with the int(), float(), and complex() methods:
Example 
#convert from int to float: 
x = float(1) 
#convert from float to int: 
y = int(2.8) 
#convert from int to complex: 
z = complex(1) 
print(x) 
print(y) 
print(z)
print(type(x)) 
print(type(y)) 
print(type(z)) 

{TPC-3}
Casting 
If you want to specify the data type of a variable, this can be done with casting. 
Example 
x = str(3) 
y = int(3) 
z = float(3) 
print(x) 
print(y) 
print(z) 

{TPC-4}
Type Casting in Python (Implicit and Explicit) with Examples
# Python program to demonstrate  
# implicit type Casting  
# Python automatically converts  
# a to int 
a=7 
print(type(a)) 
# Python automatically converts  
# b to float  
b=3.0 
print(type(b)) 
# Python automatically converts  
# c to float as it is a float addition  
c=a+b 
print(c) 
print(type(c)) 
# Python automatically converts  
# d to float as it is a float multiplication 
d=a*b 
print(d) 
print(type(d)) 
Output: 
<class 'int'> 
<class 'float'> 
10.0 
<class 'float'> 
21.0 
<class 'float'>
Explicit Type Conversion in Python 
# Python program to demonstrate  
# type Casting  
# int variable 
a=5 
# typecast to float 
n=float(a) 
print(n) 
print(type(n))
Output: 
5.0 
<class 'float'>

{TPC-5}
String in python
'hello' is the same as "hello". 

Multiline Strings 
You can assign a multiline string to a variable by using three quotes: 
Example 
You can use three double quotes: 
a = """Lorem ipsum dolor sit amet, 
consecteturadipiscingelit, 
sed do eiusmodtemporincididunt 
utlabore et dolore magna aliqua.""" 
print(a) 

output: 
Lorem ipsum dolor sit amet, 
consecteturadipiscingelit, 
sed do eiusmodtemporincididunt 
utlabore et dolore magna aliqua. 

Or three single quotes: 
Example 
a = '''Lorem ipsum dolor sit amet, 
consecteturadipiscingelit, 
sed do eiusmodtemporincididunt 
utlabore et dolore magna aliqua.''' 
print(a) 

String Length 
To get the length of a string, use the len() function. 
Example 
The len() function returns the length of a string: 
a = "Hello, World!" 
print(len(a)) 
output 
13 

Check String 
To check if a certain phrase or character is present in a string, we can use the keyword in. 
Example 
Check if "free" is present in the following text: 
txt = "The best things in life are free!" 
print("free" in txt) 
output 
True 


Use it in an if statement: 
Example 
Print only if "free" is present: 
txt = "The best things in life are free!" 
if "free" in txt: 
  print("Yes, 'free' is present.") 
output 
Yes, 'free' is present. 

Check if NOT 
To check if a certain phrase or character is NOT present in a string, we can use the keyword not in. 
Example 
Check if "expensive" is NOT present in the following text: 
txt = "The best things in life are free!" 
print("expensive" not in txt) 

Slicing 
You can return a range of characters by using the slice syntax. 
Specify the start index and the end index, separated by a colon, to return a part of the string. 
Example 
Get the characters from position 2 to position 5 (not included): 
b = "Hello, World!" 
print(b[2:5]) 
output 
llo 
True 
Note: The first character has index 0. 

Slice From the Start 
By leaving out the start index, the range will start at the first character: 
Example 
Get the characters from the start to position 5 (not included): 
b = "Hello, World!" 
print(b[:5]) 
output 
Hello 

Slice To the End 
By leaving out the end index, the range will go to the end: 
Example 
Get the characters from position 2, and all the way to the end: 
b = "Hello, World!" 
print(b[2:]) 
output 
llo, World!

Negative Indexing 
Use negative indexes to start the slice from the end of the string: 
Example 
Get the characters: 
From: "o" in "World!" (position -5) 
To, but not included: "d" in "World!" (position -2): 
b = "Hello, World!" 
print(b[-5:-2])

Escape Character 
To insert characters that are illegal in a string, use an escape character. 
An escape character is a backslash \ followed by the character you want to insert. 
An example of an illegal character is a double quote inside a string that is surrounded by double quotes: 
To fix this problem, use the escape character \": 
Example 
The escape character allows you to use double quotes when you normally would not be allowed: 
txt = "We are the so-called \"Vikings\" from the north." 

\' Single Quote 
\\ Backslash 
\n New Line 
\t Tab 
\b Backspace 

capitalize() Method: 
The capitalize() method returns a string where the first character is upper case, and the rest is lower case. 
txt = "python is FUN!" 
x = txt.capitalize() 
print (x) 
Output:Python is fun!

casefold() Method: 
The casefold() method returns a string where all the characters are lower case. 
txt = "Hello, And Welcome To My World!" 
x = txt.casefold() 
print(x) 
Output:hello, and welcome to my world! 

String center() Method: 
The center() method will center align the string, using a specified character (space is default) as the fill character. 
Syntax 
string.center(length, character) 
Parameter    Description 
length       Required. The length of the returned string 
character    Optional. The character to fill the missing space on each side. Default is " " (space) 
Print the word "banana", taking up the space of 20 characters, with "banana" in the middle: 
txt = "banana" 
x = txt.center(20) 
print(x) 
      banana 

count() Method: 
The count() method returns the number of times a specified value appears in the string. 
Syntax 
string.count(value, start, end) 
Parameter  Description 
value      Required. A String. The string to value to search for 
start      Optional. An Integer. The position to start the search. Default is 0 
end        Optional. An Integer. The position to end the search. Default is the end of the string 

Return the number of times the value "apple" appears in the string: 
txt = "I love apples, apple are my favorite fruit" 
x = txt.count("apple") 
print(x) 
2 
Search from position 10 to 24: 
txt = "I love apples, apple are my favorite fruit" 
x = txt.count("apple", 10, 24) 
print(x) 
1 

startswith() Method: 
the startswith() method returns True if the string starts with the specified value, otherwise False. 
Syntax 
string.startswith(value, start, end) 
Parameter   Description 
value       Required. The value to check if the string starts with 
start       Optional. An Integer specifying at which position to start the search 
end         Optional. An Integer specifying at which position to end the search 

Check if the string starts with "Hello": 
txt = "Hello, welcome to my world." 
x = txt.startswith("Hello") 
print(x) 
True 

endswith() Method: 
The endswith() method returns True if the string ends with the specified value, otherwise False. 
Check if the string ends with a punctuation sign (.): 
txt = "Hello, welcome to my world." 
x = txt.endswith(".") 
print(x) 
Check if the string ends with the phrase "my world.": 
txt = "Hello, welcome to my world." 
x = txt.endswith("my world.") 
print(x) 

String Concatenation 
To concatenate, or combine, two strings you can use the + operator. 
Example 
Merge variable a with variable b into variable c: 
a = "Hello" 
b = "World" 
c = a + b 
print(c) 
Output:HelloWorld 
Example 
To add a space between them, add a " ": 
a = "Hello" 
b = "World" 
c = a + " " + b 
print(c) 
Output:Hello World 

String Format 
As we learned in the Python Variables chapter, we cannot combine strings and numbers like this: 
Example 
age = 36 
txt = "My name is John, I am " + age 
print(txt)
Example 
Use the format() method to insert numbers into strings: 
age = 36	 
txt = "My name is John, and I am {}" 
print(txt.format(age)) 
My name is John, and I am 36 
The format() method takes unlimited number of arguments, and are placed into the respective placeholders: 
Example 
quantity = 3 
itemno = 567 
price = 49.95 
myorder = "I want {} pieces of item {} for {} dollars." 
print(myorder.format(quantity, itemno, price)) 
I want 3 pieces of item 567 for 49.95 dollars. 
ou can use index numbers {0} to be sure the arguments are placed in the correct placeholders: 
Example 
quantity = 3 
itemno = 567 
price = 49.95 
myorder = "I want to pay {2} dollars for {0} pieces of item {1}." 
print(myorder.format(quantity, itemno, price)) 
I want to pay 49.95 dollars for 3 pieces of item 567

Index() Method: 
The index() method finds the first occurrence of the specified value. 
The index() method raises an exception if the value is not found. 
Where in the text is the first occurrence of the letter "e"?: 
txt = "Hello, welcome to my world." 
x = txt.index("e") 
print(x) 

isalnum() Method: 
The isalnum() method returns True if all the characters are alphanumeric, meaning alphabet letter (a-z) and numbers (0-9). 
Example of characters that are not alphanumeric: (space)!#%&? etc. 
txt = "Company12" 
x = txt.isalnum() 
print(x) 
True 

isalpha() Method: 
The isalpha() method returns True if all the characters are alphabet letters (a-z). 
txt = "CompanyX" 
x = txt.isalpha() 
print(x) 
True 

islower() Method: 
The islower() method returns True if all the characters are in lower case, otherwise False. 
Numbers, symbols and spaces are not checked, only alphabet characters. 
txt = "hello world!" 
x = txt.islower() 
print(x) 

istitle() Method: 
The istitle() method returns True if all words in a text start with a upper case letter, AND the rest of the word are lower case letters, otherwise False. 
Symbols and numbers are ignored. 
ShapeSyntax 
string.istitle() 
Check if each word start with an upper case letter: 
txt = "Hello, And Welcome To My World!" 
x = txt.istitle() 
print(x) 
True 

strip() Method: 
Whitespace is the space before and/or after the actual text, and very often you want to remove this space. 
Example 
The strip() method removes any whitespace from the beginning or the end: 
a = " Hello, World! " 
print(a.strip()) # returns "Hello, World!" 

split() Method: 
The split() method splits a string into a list. 
You can specify the separator, default separator is any whitespace. 
The split() method returns a list where the text between the specified separator becomes the list items. 
Example 
The split() method splits the string into substrings if it finds instances of the separator: 
a = "Hello, World!" 
print(a.split(","))   # returns ['Hello', ' World!'] 

swapcase() Method: 
The swapcase() method returns a string where all the upper case letters are lower case and vice versa. 
ShapeSyntax 
string.swapcase() 
txt = "Hello My Name Is PETER" 
x = txt.swapcase() 
print(x) 
hELLOmYnAMEiS peter 

zfill() Method: 
The zfill() method adds zeros (0) at the beginning of the string, until it reaches the specified length. 
If the value of the len parameter is less than the length of the string, no filling is done. 
Syntax 
string.zfill(len) 

Fill the string with zeros until it is 10 characters long: 
txt = "50" 
x = txt.zfill(10) 
print(x) 
0000000050 

a = "hello" 
b = "welcome to the jungle" 
c = "10.000" 
print(a.zfill(10)) 
print(b.zfill(10)) 
print(c.zfill(10)) 
00000hello 
welcome to the jungle 
000010.000 

Replace String 
Example 
The replace() method replaces a string with another string: 
a = "Hello, World!" 
print(a.replace("H", "J")) 
Jello, World! 
